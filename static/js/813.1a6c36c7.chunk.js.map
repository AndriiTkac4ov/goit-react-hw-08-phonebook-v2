{"version":3,"file":"static/js/813.1a6c36c7.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.filter;","import styled from 'styled-components';\n\nexport const Form = styled.form`\n    width: 288px;\n    margin-right: auto;\n    margin-left: auto;\n    margin-bottom: 16px;\n\n    @media screen and (min-width: 768px) {\n        & {\n            width: 400px;\n            padding: 8px;\n        };\n    }\n`;\n\nexport const LabelField = styled.label`\n    display: block;\n    margin-bottom: 16px;\n    font-size: ${props => props.theme.spacing(2)};\n    font-weight: 500;\n    line-height: 1.2;\n\n    @media screen and (min-width: 768px) {\n        & {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        };\n    }\n`;\n\nexport const InputField = styled.input`\n    width: 262px;\n    margin-top: 8px;\n    padding: 12px;\n    font-size: ${props => props.theme.spacing(2)};\n    line-height: 1.2;\n    border: 1px solid chocolate;\n    border-radius: ${props => props.theme.spacing(1)};\n    cursor: pointer;\n\n    @media screen and (min-width: 768px) {\n        & {\n            width: 284px;\n        };\n    }\n`;\n\nexport const ButtonAdding = styled.button`\n    padding: 8px 24px;\n    font-size: ${props => props.theme.spacing(2)};\n    font-weight: 700;\n    line-height: 1.2;\n    border: 1px solid chocolate;\n    border-radius: ${props => props.theme.spacing(1)};\n    cursor: pointer;\n    background: burlywood;\n    color: honeydew;\n    transition: background-color 0.25s ease-in-out, color 0.25s ease-in-out, border-color 0.25s ease-in-out, transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n        background: chocolate;\n        color: springgreen;\n        border: 1px solid springgreen;\n        transform: scale(1.1);\n    }\n`;","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport * as contactsOperations from \"redux/contacts/contactsOperations\";\nimport { Form, LabelField, InputField, ButtonAdding } from \"./ContactForm.styled\";\n\nconst ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.currentTarget;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        const newContact = {\n            id: nanoid(),\n            name,\n            number,\n        };\n\n        const isContactNameInList = contactName => {\n            return contacts.find(contact => contact.name === contactName);\n        }\n        \n        if (isContactNameInList(name)) {\n            alert(`${name} is already in contacts.`);\n            return;\n        };\n\n        dispatch(contactsOperations.addContact(newContact));\n\n        setName('');\n        setNumber('');\n    }\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <LabelField>\n                Name\n                <InputField\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    autoComplete=\"off\"\n                    value={name}\n                    onChange={handleInputChange}\n                />\n            </LabelField>\n\n            <LabelField>\n                Number\n                <InputField\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    autoComplete=\"off\"\n                    value={number}\n                    onChange={handleInputChange}\n                />\n            </LabelField>\n\n            <ButtonAdding type=\"submit\">Add contact</ButtonAdding>\n        </Form>\n    )\n}\n\nexport default ContactForm;","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 400px;\n    margin-right: auto;\n    margin-left: auto;\n    margin-bottom: 8px;\n    font-size: ${props => props.theme.spacing(2)};\n    font-weight: 500;\n    line-height: 1.2;\n`;\n\nexport const FilterInput = styled.input`\n    padding: 8px;\n    font-size: ${props => props.theme.spacing(2)};\n    line-height: 1.2;\n    border: 1px solid chocolate;\n    border-radius: ${props => props.theme.spacing(1)};\n    width: 196px;\n    cursor: pointer;\n`;","import { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilter } from \"redux/contacts/selectors\";\nimport { filterList } from \"redux/contacts/filterSlice\";\nimport { FilterLabel, FilterInput } from \"./Filter.styled\";\n\nconst Filter = () => {\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    return (\n        <FilterLabel>\n            Find contacts by name\n            <FilterInput\n                type=\"text\"\n                value={filter}\n                onChange={event => dispatch(filterList(event.currentTarget.value))}\n            />\n        </FilterLabel>\n    )\n}\n\nexport default Filter;","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n    width: 400px;\n    margin: 0 auto;\n    padding: 8px;\n    text-align: start;\n    list-style: none;\n    /* border: 1px solid chocolate;\n    border-radius: ${props => props.theme.spacing(1)}; */\n`;","import styled from 'styled-components';\n\nexport const ContactsItem = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    &:not(:last-child){\n        margin-bottom: ${props => props.theme.spacing(1)};\n    }\n`;\n\nexport const ContactName = styled.p`\n    margin: 0;\n    font-size: ${props => props.theme.spacing(2)};\n    line-height: 1.5;\n`;\n\nexport const ButtonDeleting = styled.button`\n    padding: 4px 24px;\n    font-size: ${props => props.theme.spacing(2)};\n    font-weight: 500;\n    line-height: 1.2;\n    border: 1px solid chocolate;\n    border-radius: ${props => props.theme.spacing(1)};\n    cursor: pointer;\n    background: burlywood;\n    color: honeydew;\n    transition: background-color 0.25s ease-in-out, color 0.25s ease-in-out, border-color 0.25s ease-in-out, transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    &:hover,\n    &:focus {\n        background: chocolate;\n        color: springgreen;\n        border: 1px solid springgreen;\n        transform: scale(1.1);\n    }\n`;","import PropTypes from 'prop-types';\nimport { useDispatch } from \"react-redux\";\nimport * as contactsOperations from \"redux/contacts/contactsOperations\";\nimport { ContactsItem, ContactName, ButtonDeleting } from \"./ContactItem.styled\";\n\nexport default function ContactItem({ id, name, number }) {\n    const dispatch = useDispatch();\n\n    return (\n        <ContactsItem>\n            <ContactName>{name}: {number}</ContactName>\n            <ButtonDeleting type=\"button\" onClick={() => dispatch(contactsOperations.deleteContact(id))}>Delete</ButtonDeleting>\n        </ContactsItem>\n    )\n}\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n}","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectContacts, selectFilter } from \"redux/contacts/selectors\";\nimport { ContactsList } from \"./ContactList.styled\";\nimport * as contactsOperations from \"redux/contacts/contactsOperations\";\nimport ContactItem from '../ContactItem/ContactItem';\n\nexport default function ContactList() {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts())\n    }, [dispatch])\n    \n    const getFilteredContacts = () => {\n        const normalizedFilter = filter.toLowerCase();\n        \n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n    }\n    \n    const filteredContacts = getFilteredContacts();\n\n    return (\n        <ContactsList>\n            {filteredContacts.map(({ id, name, number }) => (\n                <ContactItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    number={number}\n                />\n            ))}\n        </ContactsList>\n    )\n}\n","import styled from 'styled-components';\n\nexport const ContactsGroup = styled.div`\n    margin: 0;\n    padding: 16px 16px;\n    text-align: center;\n    background: lavender;\n    color: chocolate;\n\n    @media screen and (min-width: 768px) {\n        & {\n            padding: 16px 40px;\n        };\n    }\n`;\n\nexport const AppTitle = styled.h1`\n    margin: 0 0 16px 0;\n    font-size: ${props => props.theme.spacing(4)};\n    font-weight: 700;\n    line-height: 1.5;\n`;\n\nexport const ContactsTitle = styled.h2`\n    margin: 0 0 8px 0;\n    font-size: ${props => props.theme.spacing(3)};\n    font-weight: 500;\n    line-height: 1.5;\n`;","import ContactForm from \"components/ContactForm/ContactForm\";\nimport Filter from \"components/Filter/Filter\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport Loader from \"components/Loader/Loader\";\nimport { selectIsLoading} from \"redux/contacts/selectors\";\nimport { useSelector } from \"react-redux\";\nimport {\n    ContactsGroup,\n    AppTitle,\n    ContactsTitle,\n} from \"./Contacts.styled\";\n\nconst ContactsPage = () => {\n    const isLoading = useSelector(selectIsLoading);\n\n    return (\n        <ContactsGroup>\n            <AppTitle>Phonebook</AppTitle>\n            <ContactForm />\n            <ContactsTitle>Contacts</ContactsTitle>\n            <Filter />\n            {isLoading && <Loader />}\n            <ContactList />\n        </ContactsGroup>\n    )\n}\n\nexport default ContactsPage;"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","Form","styled","LabelField","props","theme","spacing","InputField","ButtonAdding","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInputChange","event","currentTarget","value","onSubmit","preventDefault","contactName","newContact","find","contact","alert","contactsOperations","type","pattern","title","required","autoComplete","onChange","FilterLabel","FilterInput","filterList","ContactsList","ContactsItem","ContactName","ButtonDeleting","ContactItem","onClick","ContactList","useEffect","filteredContacts","normalizedFilter","toLowerCase","includes","getFilteredContacts","map","ContactsGroup","AppTitle","ContactsTitle","Loader"],"sourceRoot":""}